zabbix_export:
  version: '5.4'
  date: '2021-05-28T03:08:32Z'
  groups:
    -
      uuid: a571c0d144b14fd4a87a9d9b2aa9fcd6
      name: Templates/Applications
  templates:
    -
      uuid: b9514029d03b44de9adf24251778dbf3
      template: 'RabbitMQ node by HTTP'
      name: 'RabbitMQ node by HTTP'
      description: |
        Get node metrics from RabbitMQ management plugin provided an HTTP-based API using HTTP agent.
        
        You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback/387226-discussion-thread-for-official-zabbix-template-rabbitmq
        
        Template tooling version used: 0.38
      groups:
        -
          name: Templates/Applications
      items:
        -
          uuid: 542f36f0b4e24d99a402a98b6f6fe4c4
          name: 'RabbitMQ: Service response time'
          type: SIMPLE
          key: 'net.tcp.service.perf[http,"{HOST.CONN}","{$RABBITMQ.API.PORT}"]'
          history: 7d
          value_type: FLOAT
          units: s
          tags:
            -
              tag: Application
              value: RabbitMQ
          triggers:
            -
              uuid: 220eedd4f69b43fabe233b5127e09c50
              expression: 'min(/RabbitMQ node by HTTP/net.tcp.service.perf[http,"{HOST.CONN}","{$RABBITMQ.API.PORT}"],5m)>{$RABBITMQ.RESPONSE_TIME.MAX.WARN}'
              name: 'RabbitMQ: Service response time is too high (over {$RABBITMQ.RESPONSE_TIME.MAX.WARN}s for 5m)'
              priority: WARNING
              description: 'Last value: {ITEM.LASTVALUE1}.'
              manual_close: 'YES'
              dependencies:
                -
                  name: 'RabbitMQ: Service is down'
                  expression: 'last(/RabbitMQ node by HTTP/net.tcp.service[http,"{HOST.CONN}","{$RABBITMQ.API.PORT}"])=0'
        -
          uuid: f53379f858f74714b15ee12fe6fc2d08
          name: 'RabbitMQ: Service ping'
          type: SIMPLE
          key: 'net.tcp.service[http,"{HOST.CONN}","{$RABBITMQ.API.PORT}"]'
          history: 7d
          valuemap:
            name: 'Service state'
          preprocessing:
            -
              type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 10m
          tags:
            -
              tag: Application
              value: RabbitMQ
          triggers:
            -
              uuid: 636356e5255d49d992df4b7a0c7d222d
              expression: 'last(/RabbitMQ node by HTTP/net.tcp.service[http,"{HOST.CONN}","{$RABBITMQ.API.PORT}"])=0'
              name: 'RabbitMQ: Service is down'
              priority: AVERAGE
              description: 'Last value: {ITEM.LASTVALUE1}.'
              manual_close: 'YES'
        -
          uuid: 14468c29d16440cfb40429f58a0399f4
          name: 'RabbitMQ: Get nodes'
          type: HTTP_AGENT
          key: rabbitmq.get_nodes
          history: 1h
          trends: '0'
          value_type: TEXT
          authtype: BASIC
          username: '{$RABBITMQ.API.USER}'
          password: '{$RABBITMQ.API.PASSWORD}'
          description: 'The HTTP API endpoint that returns nodes metrics'
          url: '{$RABBITMQ.API.SCHEME}://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true'
          tags:
            -
              tag: Application
              value: 'Zabbix raw items'
          triggers:
            -
              uuid: d4452f05d08343c7a374da412c0f1de6
              expression: 'nodata(/RabbitMQ node by HTTP/rabbitmq.get_nodes,30m)=1'
              name: 'RabbitMQ: Failed to fetch nodes data (or no data for 30m)'
              priority: WARNING
              description: |
                Zabbix has not received data for items for the last 30 minutes.
                Last value: {ITEM.LASTVALUE1}.
              manual_close: 'YES'
              dependencies:
                -
                  name: 'RabbitMQ: Service is down'
                  expression: 'last(/RabbitMQ node by HTTP/net.tcp.service[http,"{HOST.CONN}","{$RABBITMQ.API.PORT}"])=0'
        -
          uuid: ff7ec5f6e2354c90bffdbd25f9360555
          name: 'RabbitMQ: Get node overview'
          type: HTTP_AGENT
          key: rabbitmq.get_node_overview
          history: 1h
          trends: '0'
          value_type: TEXT
          authtype: BASIC
          username: '{$RABBITMQ.API.USER}'
          password: '{$RABBITMQ.API.PASSWORD}'
          description: 'The HTTP API endpoint that returns cluster-wide metrics'
          url: '{$RABBITMQ.API.SCHEME}://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/overview'
          tags:
            -
              tag: Application
              value: 'Zabbix raw items'
        -
          uuid: 3d0770d550b24f5ca80289cb723c8386
          name: 'RabbitMQ: Get queues'
          type: HTTP_AGENT
          key: rabbitmq.get_queues
          history: 1h
          trends: '0'
          value_type: TEXT
          authtype: BASIC
          username: '{$RABBITMQ.API.USER}'
          password: '{$RABBITMQ.API.PASSWORD}'
          description: 'The HTTP API endpoint that returns queues metrics'
          url: '{$RABBITMQ.API.SCHEME}://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/queues'
          tags:
            -
              tag: Application
              value: 'Zabbix raw items'
        -
          uuid: 6f747f5d02ed40c8be8233a391b66d6e
          name: 'RabbitMQ: Healthcheck'
          type: HTTP_AGENT
          key: rabbitmq.healthcheck
          history: 7h
          authtype: BASIC
          username: '{$RABBITMQ.API.USER}'
          password: '{$RABBITMQ.API.PASSWORD}'
          description: 'Runs basic healthchecks in the current node. Checks that the rabbit application is running, channels and queues can be listed successfully, and that no alarms are in effect.'
          valuemap:
            name: 'RabbitMQ healthcheck'
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.status
            -
              type: BOOL_TO_DECIMAL
              parameters:
                - ''
              error_handler: CUSTOM_VALUE
              error_handler_params: '0'
          url: '{$RABBITMQ.API.SCHEME}://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/healthchecks/node'
          tags:
            -
              tag: Application
              value: RabbitMQ
          triggers:
            -
              uuid: a5774fad89554d219ebb56a528cd2524
              expression: 'last(/RabbitMQ node by HTTP/rabbitmq.healthcheck)=0'
              name: 'RabbitMQ: Node healthcheck failed'
              opdata: 'Current state: {ITEM.LASTVALUE1}'
              priority: AVERAGE
              description: |
                https://www.rabbitmq.com/monitoring.html#health-checks.
                Last value: {ITEM.LASTVALUE1}.
        -
          uuid: 8cb8f380645f4d7f8250b110acd47d1c
          name: 'RabbitMQ: Free disk space'
          type: DEPENDENT
          key: rabbitmq.node.disk_free
          delay: '0'
          history: 7d
          units: B
          description: 'Current free disk space'
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.disk_free
          master_item:
            key: rabbitmq.get_nodes
          tags:
            -
              tag: Application
              value: RabbitMQ
        -
          uuid: 38099990b854421ca39f178b9c9be016
          name: 'RabbitMQ: Disk free alarm'
          type: DEPENDENT
          key: rabbitmq.node.disk_free_alarm
          delay: '0'
          history: 7d
          description: 'Does the node have disk alarm'
          valuemap:
            name: 'Alarm state'
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.disk_free_alarm
            -
              type: BOOL_TO_DECIMAL
              parameters:
                - ''
          master_item:
            key: rabbitmq.get_nodes
          tags:
            -
              tag: Application
              value: RabbitMQ
          triggers:
            -
              uuid: 093eec2fd9264f158087509d8364dc09
              expression: 'last(/RabbitMQ node by HTTP/rabbitmq.node.disk_free_alarm)=1'
              name: 'RabbitMQ: Free disk space alarm (Free space threshold has been reached)'
              opdata: 'Current state: {ITEM.LASTVALUE1}'
              priority: AVERAGE
              description: |
                https://www.rabbitmq.com/disk-alarms.html.
                Last value: {ITEM.LASTVALUE1}.
        -
          uuid: ce9f4b99c77545fb8acd596d72725898
          name: 'RabbitMQ: Disk free limit'
          type: DEPENDENT
          key: rabbitmq.node.disk_free_limit
          delay: '0'
          history: 7d
          units: B
          description: 'Disk free space limit in bytes'
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.disk_free_limit
          master_item:
            key: rabbitmq.get_nodes
          tags:
            -
              tag: Application
              value: RabbitMQ
        -
          uuid: fae24c176bd34b81b0f578883c5c2760
          name: 'RabbitMQ: Used file descriptors'
          type: DEPENDENT
          key: rabbitmq.node.fd_used
          delay: '0'
          history: 7d
          description: 'Used file descriptors'
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.fd_used
          master_item:
            key: rabbitmq.get_nodes
          tags:
            -
              tag: Application
              value: RabbitMQ
        -
          uuid: 70ec112fc828476e96a469e0f94fc415
          name: 'RabbitMQ: Memory alarm'
          type: DEPENDENT
          key: rabbitmq.node.mem_alarm
          delay: '0'
          history: 7d
          description: 'Does the host has memory alarm'
          valuemap:
            name: 'Alarm state'
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.mem_alarm
            -
              type: BOOL_TO_DECIMAL
              parameters:
                - ''
          master_item:
            key: rabbitmq.get_nodes
          tags:
            -
              tag: Application
              value: RabbitMQ
          triggers:
            -
              uuid: 843be64cfdcd4df5b3fea4726da69c7e
              expression: 'last(/RabbitMQ node by HTTP/rabbitmq.node.mem_alarm)=1'
              name: 'RabbitMQ: Memory alarm (Memory usage threshold has been reached)'
              opdata: 'Current state: {ITEM.LASTVALUE1}'
              priority: AVERAGE
              description: |
                https://www.rabbitmq.com/memory.html.
                Last value: {ITEM.LASTVALUE1}.
        -
          uuid: 2445b494bf0648248b333d6f0afd95a2
          name: 'RabbitMQ: Memory limit'
          type: DEPENDENT
          key: rabbitmq.node.mem_limit
          delay: '0'
          history: 7d
          units: B
          description: 'Memory usage high watermark in bytes'
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.mem_limit
          master_item:
            key: rabbitmq.get_nodes
          tags:
            -
              tag: Application
              value: RabbitMQ
        -
          uuid: 9e4f2c0cb6604364ab0a2b4def7466e2
          name: 'RabbitMQ: Memory used'
          type: DEPENDENT
          key: rabbitmq.node.mem_used
          delay: '0'
          history: 7d
          units: B
          description: 'Memory used in bytes'
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.mem_used
          master_item:
            key: rabbitmq.get_nodes
          tags:
            -
              tag: Application
              value: RabbitMQ
        -
          uuid: 129026dd49124ff2ba4f0bcc7f1fa9de
          name: 'RabbitMQ: Management plugin version'
          type: DEPENDENT
          key: rabbitmq.node.overview.management_version
          delay: '0'
          history: 7d
          trends: '0'
          value_type: CHAR
          description: 'Version of the management plugin in use'
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.management_version
            -
              type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          master_item:
            key: rabbitmq.get_node_overview
          tags:
            -
              tag: Application
              value: RabbitMQ
        -
          uuid: d63d8001d5134e2590d3e7ca8b62958c
          name: 'RabbitMQ: RabbitMQ version'
          type: DEPENDENT
          key: rabbitmq.node.overview.rabbitmq_version
          delay: '0'
          history: 7d
          trends: '0'
          value_type: CHAR
          description: 'Version of RabbitMQ on the node which processed this request'
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.rabbitmq_version
            -
              type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          master_item:
            key: rabbitmq.get_node_overview
          tags:
            -
              tag: Application
              value: RabbitMQ
          triggers:
            -
              uuid: 19989038dfe84fcdb12262ee3782ab41
              expression: '(last(/RabbitMQ node by HTTP/rabbitmq.node.overview.rabbitmq_version,#1)<>last(/RabbitMQ node by HTTP/rabbitmq.node.overview.rabbitmq_version,#2))=1 and length(last(/RabbitMQ node by HTTP/rabbitmq.node.overview.rabbitmq_version))>0'
              name: 'RabbitMQ: Version has changed (new version: {ITEM.VALUE})'
              priority: INFO
              description: |
                RabbitMQ version has changed. Ack to close.
                Last value: {ITEM.LASTVALUE1}.
              manual_close: 'YES'
        -
          uuid: ac9282c012bd4249a096a462d21dcf62
          name: 'RabbitMQ: Number of network partitions'
          type: DEPENDENT
          key: rabbitmq.node.partitions
          delay: '0'
          history: 7d
          description: 'Number of network partitions this node is seeing'
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.partitions
            -
              type: JAVASCRIPT
              parameters:
                - 'return JSON.parse(value).length;'
          master_item:
            key: rabbitmq.get_nodes
          tags:
            -
              tag: Application
              value: RabbitMQ
          triggers:
            -
              uuid: 943d239a9fa5443dac3205c65a4da033
              expression: 'min(/RabbitMQ node by HTTP/rabbitmq.node.partitions,5m)>0'
              name: 'RabbitMQ: Number of network partitions is too high (more than 0 for 5m)'
              opdata: 'Current value: {ITEM.LASTVALUE1}'
              priority: WARNING
              description: |
                https://www.rabbitmq.com/partitions.html#detecting.
                Last value: {ITEM.LASTVALUE1}.
        -
          uuid: 5f819282c32b49039a2dae56b9be23cd
          name: 'RabbitMQ: Is running'
          type: DEPENDENT
          key: rabbitmq.node.running
          delay: '0'
          history: 7d
          description: 'Is the node running or not'
          valuemap:
            name: 'Service state'
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.running
            -
              type: BOOL_TO_DECIMAL
              parameters:
                - ''
          master_item:
            key: rabbitmq.get_nodes
          tags:
            -
              tag: Application
              value: RabbitMQ
          triggers:
            -
              uuid: 4b15e72e2133458ebac9c72c5fcb90e6
              expression: 'max(/RabbitMQ node by HTTP/rabbitmq.node.running,5m)=0'
              name: 'RabbitMQ: Node is not running'
              opdata: 'Current state: {ITEM.LASTVALUE1}'
              priority: AVERAGE
              description: |
                RabbitMQ node is not running.
                Last value: {ITEM.LASTVALUE1}.
              dependencies:
                -
                  name: 'RabbitMQ: Service is down'
                  expression: 'last(/RabbitMQ node by HTTP/net.tcp.service[http,"{HOST.CONN}","{$RABBITMQ.API.PORT}"])=0'
        -
          uuid: ddc906d9a969401ebf520490e62f4086
          name: 'RabbitMQ: Runtime run queue'
          type: DEPENDENT
          key: rabbitmq.node.run_queue
          delay: '0'
          history: 7d
          description: 'Average number of Erlang processes waiting to run'
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.run_queue
          master_item:
            key: rabbitmq.get_nodes
          tags:
            -
              tag: Application
              value: RabbitMQ
        -
          uuid: 16f4f6a6d8f14980a6edcc2d84b0cd8d
          name: 'RabbitMQ: Sockets available'
          type: DEPENDENT
          key: rabbitmq.node.sockets_total
          delay: '0'
          history: 7d
          description: 'File descriptors available for use as sockets'
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.sockets_total
          master_item:
            key: rabbitmq.get_nodes
          tags:
            -
              tag: Application
              value: RabbitMQ
        -
          uuid: 31455694c0994c9d9eaa8af048e88e95
          name: 'RabbitMQ: Sockets used'
          type: DEPENDENT
          key: rabbitmq.node.sockets_used
          delay: '0'
          history: 7d
          description: 'Number of file descriptors used as sockets'
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.sockets_used
          master_item:
            key: rabbitmq.get_nodes
          tags:
            -
              tag: Application
              value: RabbitMQ
        -
          uuid: 65a2fd59ddfe413b9259c547338f3351
          name: 'RabbitMQ: Uptime'
          type: DEPENDENT
          key: rabbitmq.node.uptime
          delay: '0'
          history: 7d
          value_type: FLOAT
          units: s
          description: 'Uptime in milliseconds'
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.uptime
            -
              type: MULTIPLIER
              parameters:
                - '0.001'
          master_item:
            key: rabbitmq.get_nodes
          tags:
            -
              tag: Application
              value: RabbitMQ
          triggers:
            -
              uuid: 6edfa365704f480da4b35b51b6ed84f4
              expression: 'last(/RabbitMQ node by HTTP/rabbitmq.node.uptime)<10m'
              name: 'RabbitMQ: has been restarted (uptime < 10m)'
              priority: INFO
              description: |
                Uptime is less than 10 minutes.
                Last value: {ITEM.LASTVALUE1}.
              manual_close: 'YES'
      discovery_rules:
        -
          uuid: cc1d85b6045b44b38f588cd9a4c6c62d
          name: 'Queues discovery'
          type: DEPENDENT
          key: rabbitmq.queues.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              -
                macro: '{#QUEUE}'
                value: '{$RABBITMQ.LLD.FILTER.QUEUE.MATCHES}'
                formulaid: B
              -
                macro: '{#QUEUE}'
                value: '{$RABBITMQ.LLD.FILTER.QUEUE.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: C
              -
                macro: '{#NODE}'
                value: '{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}'
                formulaid: A
          description: 'Individual queue metrics'
          item_prototypes:
            -
              uuid: be1c1c6b727a45cca039f0f00f184943
              name: 'RabbitMQ: Queue {#VHOST}/{#QUEUE}: Consumers'
              type: DEPENDENT
              key: 'rabbitmq.queue.consumers["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              description: 'Number of consumers'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.name == "{#QUEUE}" && @.vhost == "{#VHOST}")].consumers.first()'
              master_item:
                key: rabbitmq.get_queues
              tags:
                -
                  tag: Application
                  value: 'RabbitMQ: Queue "{#VHOST}/{#QUEUE}"'
            -
              uuid: 5d420017c0f14f37aa7c7ef986b54a77
              name: 'RabbitMQ: Queue {#VHOST}/{#QUEUE}: Memory'
              type: DEPENDENT
              key: 'rabbitmq.queue.memory["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              units: B
              description: 'Bytes of memory consumed by the Erlang process associated with the queue, including stack, heap and internal structures'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.name == "{#QUEUE}" && @.vhost == "{#VHOST}")].memory.first()'
              master_item:
                key: rabbitmq.get_queues
              tags:
                -
                  tag: Application
                  value: 'RabbitMQ: Queue "{#VHOST}/{#QUEUE}"'
            -
              uuid: 3902227627d84cad8794604bd4f091fd
              name: 'RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages acknowledged per second'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages.ack.rate["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              description: 'Number per second of messages delivered to clients and acknowledged'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.name == "{#QUEUE}" && @.vhost == "{#VHOST}")].message_stats.ack_details.rate.first()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: rabbitmq.get_queues
              tags:
                -
                  tag: Application
                  value: 'RabbitMQ: Queue "{#VHOST}/{#QUEUE}"'
            -
              uuid: 2f2ca541c80b47cba2b5147a1c77aac5
              name: 'RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages acknowledged'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages.ack["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              description: 'Number of messages delivered to clients and acknowledged'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.name == "{#QUEUE}" && @.vhost == "{#VHOST}")].message_stats.ack.first()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: rabbitmq.get_queues
              tags:
                -
                  tag: Application
                  value: 'RabbitMQ: Queue "{#VHOST}/{#QUEUE}"'
            -
              uuid: b8a9c0ca7fda4756a8b79ac83c4bcd07
              name: 'RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages delivered per second'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages.deliver.rate["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              description: 'Count of messages delivered in acknowledgement mode to consumers'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.name == "{#QUEUE}" && @.vhost == "{#VHOST}")].message_stats.deliver_details.rate.first()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: rabbitmq.get_queues
              tags:
                -
                  tag: Application
                  value: 'RabbitMQ: Queue "{#VHOST}/{#QUEUE}"'
            -
              uuid: e150c5d35ed144ca87945ef4f7a0998a
              name: 'RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages delivered'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages.deliver["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              description: 'Count of messages delivered in acknowledgement mode to consumers'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.name == "{#QUEUE}" && @.vhost == "{#VHOST}")].message_stats.deliver.first()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: rabbitmq.get_queues
              tags:
                -
                  tag: Application
                  value: 'RabbitMQ: Queue "{#VHOST}/{#QUEUE}"'
            -
              uuid: 9b74bc2a830e43e28ad6c44037dbd1d7
              name: 'RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages delivered per second'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages.deliver_get.rate["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              description: 'Rate per second of the sum of messages delivered in acknowledgement mode to consumers, in no-acknowledgement mode to consumers, in acknowledgement mode in response to basic.get, and in no-acknowledgement mode in response to basic.get'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.name == "{#QUEUE}" && @.vhost == "{#VHOST}")].message_stats.deliver_get_details.rate.first()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: rabbitmq.get_queues
              tags:
                -
                  tag: Application
                  value: 'RabbitMQ: Queue "{#VHOST}/{#QUEUE}"'
            -
              uuid: 837c46d0fd7d4ad18669dcbf62ae7025
              name: 'RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages delivered'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages.deliver_get["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              description: 'Sum of messages delivered in acknowledgement mode to consumers, in no-acknowledgement mode to consumers, in acknowledgement mode in response to basic.get, and in no-acknowledgement mode in response to basic.get'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.name == "{#QUEUE}" && @.vhost == "{#VHOST}")].message_stats.deliver_get.first()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: rabbitmq.get_queues
              tags:
                -
                  tag: Application
                  value: 'RabbitMQ: Queue "{#VHOST}/{#QUEUE}"'
            -
              uuid: 232ee8103a5d4fb6b2b41ca641f19088
              name: 'RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages published per second'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages.publish.rate["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              description: 'Rate per second of messages published'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.name == "{#QUEUE}" && @.vhost == "{#VHOST}")].message_stats.publish_details.rate.first()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: rabbitmq.get_queues
              tags:
                -
                  tag: Application
                  value: 'RabbitMQ: Queue "{#VHOST}/{#QUEUE}"'
            -
              uuid: dfafc461ad8a45ba8f08a12ec9f4e2d3
              name: 'RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages published'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages.publish["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              description: 'Count of messages published'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.name == "{#QUEUE}" && @.vhost == "{#VHOST}")].message_stats.publish.first()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: rabbitmq.get_queues
              tags:
                -
                  tag: Application
                  value: 'RabbitMQ: Queue "{#VHOST}/{#QUEUE}"'
            -
              uuid: 888dbb2c1b13429b9d20034fcc783f14
              name: 'RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages per second'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages.rate["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              description: 'Count per second of the total messages in the queue'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.name == "{#QUEUE}" && @.vhost == "{#VHOST}")].messages_details.rate.first()'
              master_item:
                key: rabbitmq.get_queues
              tags:
                -
                  tag: Application
                  value: 'RabbitMQ: Queue "{#VHOST}/{#QUEUE}"'
            -
              uuid: a34e852ddce64d80a88129eef9ba1ab2
              name: 'RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages redelivered per second'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages.redeliver.rate["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              description: 'Rate per second of subset of messages in deliver_get which had the redelivered flag set'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.name == "{#QUEUE}" && @.vhost == "{#VHOST}")].message_stats.redeliver_details.rate.first()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: rabbitmq.get_queues
              tags:
                -
                  tag: Application
                  value: 'RabbitMQ: Queue "{#VHOST}/{#QUEUE}"'
            -
              uuid: 75501a52ffab4972a5988ac4ae0c82d8
              name: 'RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages redelivered'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages.redeliver["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              description: 'Count of subset of messages in deliver_get which had the redelivered flag set'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.name == "{#QUEUE}" && @.vhost == "{#VHOST}")].message_stats.redeliver.first()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: rabbitmq.get_queues
              tags:
                -
                  tag: Application
                  value: 'RabbitMQ: Queue "{#VHOST}/{#QUEUE}"'
            -
              uuid: 171e5dbff18f47c98da2c1a3b7120622
              name: 'RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              description: 'Count of the total messages in the queue'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.name == "{#QUEUE}" && @.vhost == "{#VHOST}")].messages.first()'
              master_item:
                key: rabbitmq.get_queues
              tags:
                -
                  tag: Application
                  value: 'RabbitMQ: Queue "{#VHOST}/{#QUEUE}"'
              trigger_prototypes:
                -
                  uuid: b6f52153a22144338e6d002287446ac1
                  expression: 'min(/RabbitMQ node by HTTP/rabbitmq.queue.messages["{#VHOST}/{#QUEUE}"],5m)>{$RABBITMQ.MESSAGES.MAX.WARN:"{#QUEUE}"}'
                  name: 'RabbitMQ: Too many messages in queue (over {$RABBITMQ.MESSAGES.MAX.WARN} for 5m)'
                  opdata: 'Current value: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: 'Last value: {ITEM.LASTVALUE1}.'
            -
              uuid: f55c5f66ddac46fd95c5379875342284
              name: 'RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages ready per second'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages_ready.rate["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              description: 'Number per second of messages ready to be delivered to clients'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.name == "{#QUEUE}" && @.vhost == "{#VHOST}")].messages_ready_details.rate.first()'
              master_item:
                key: rabbitmq.get_queues
              tags:
                -
                  tag: Application
                  value: 'RabbitMQ: Queue "{#VHOST}/{#QUEUE}"'
            -
              uuid: 67c9a8eee9a54eed946ab141927494c4
              name: 'RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages ready'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages_ready["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              description: 'Number of messages ready to be delivered to clients'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.name == "{#QUEUE}" && @.vhost == "{#VHOST}")].messages_ready.first()'
              master_item:
                key: rabbitmq.get_queues
              tags:
                -
                  tag: Application
                  value: 'RabbitMQ: Queue "{#VHOST}/{#QUEUE}"'
            -
              uuid: a8cc3296990640a6bf5d7319ba2e8650
              name: 'RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages unacknowledged per second'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages_unacknowledged.rate["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              description: 'Number per second of messages delivered to clients but not yet acknowledged'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.name == "{#QUEUE}" && @.vhost == "{#VHOST}")].messages_unacknowledged_details.rate.first()'
              master_item:
                key: rabbitmq.get_queues
              tags:
                -
                  tag: Application
                  value: 'RabbitMQ: Queue "{#VHOST}/{#QUEUE}"'
            -
              uuid: bb6a84983caa486482e241c6bf7e9534
              name: 'RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages unacknowledged'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages_unacknowledged["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              description: 'Number of messages delivered to clients but not yet acknowledged'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.name == "{#QUEUE}" && @.vhost == "{#VHOST}")].messages_unacknowledged.first()'
              master_item:
                key: rabbitmq.get_queues
              tags:
                -
                  tag: Application
                  value: 'RabbitMQ: Queue "{#VHOST}/{#QUEUE}"'
          graph_prototypes:
            -
              uuid: 4e6b194fd13f4b97a66ee4d335958003
              name: 'RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages per second'
              graph_items:
                -
                  color: 1A7C11
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages.rate["{#VHOST}/{#QUEUE}"]'
                -
                  sortorder: '1'
                  color: 2774A4
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages.ack.rate["{#VHOST}/{#QUEUE}"]'
                -
                  sortorder: '2'
                  color: F63100
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages.deliver.rate["{#VHOST}/{#QUEUE}"]'
                -
                  sortorder: '3'
                  color: A54F10
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages.deliver_get.rate["{#VHOST}/{#QUEUE}"]'
                -
                  sortorder: '4'
                  color: FC6EA3
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages.publish.rate["{#VHOST}/{#QUEUE}"]'
                -
                  sortorder: '5'
                  color: 6C59DC
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages_ready.rate["{#VHOST}/{#QUEUE}"]'
                -
                  sortorder: '6'
                  color: AC8C14
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages.redeliver.rate["{#VHOST}/{#QUEUE}"]'
                -
                  sortorder: '7'
                  color: 611F27
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages_unacknowledged.rate["{#VHOST}/{#QUEUE}"]'
            -
              uuid: adba8787c1d14670a5ca3bf07d9dc663
              name: 'RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages status'
              graph_items:
                -
                  color: 1A7C11
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages["{#VHOST}/{#QUEUE}"]'
                -
                  sortorder: '1'
                  color: 2774A4
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages.ack["{#VHOST}/{#QUEUE}"]'
                -
                  sortorder: '2'
                  color: F63100
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages.deliver["{#VHOST}/{#QUEUE}"]'
                -
                  sortorder: '3'
                  color: A54F10
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages.deliver_get["{#VHOST}/{#QUEUE}"]'
                -
                  sortorder: '4'
                  color: FC6EA3
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages.publish["{#VHOST}/{#QUEUE}"]'
                -
                  sortorder: '5'
                  color: 6C59DC
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages_ready["{#VHOST}/{#QUEUE}"]'
                -
                  sortorder: '6'
                  color: AC8C14
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages.redeliver["{#VHOST}/{#QUEUE}"]'
                -
                  sortorder: '7'
                  color: 611F27
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages_unacknowledged["{#VHOST}/{#QUEUE}"]'
          master_item:
            key: rabbitmq.get_queues
          lld_macro_paths:
            -
              lld_macro: '{#NODE}'
              path: $.node
            -
              lld_macro: '{#QUEUE}'
              path: $.name
            -
              lld_macro: '{#VHOST}'
              path: $.vhost
      macros:
        -
          macro: '{$RABBITMQ.API.PASSWORD}'
          value: zabbix
        -
          macro: '{$RABBITMQ.API.PORT}'
          value: '15672'
          description: 'The port of RabbitMQ API endpoint'
        -
          macro: '{$RABBITMQ.API.SCHEME}'
          value: http
          description: 'Request scheme which may be http or https'
        -
          macro: '{$RABBITMQ.API.USER}'
          value: zbx_monitor
        -
          macro: '{$RABBITMQ.CLUSTER.NAME}'
          value: rabbit
          description: 'The name of RabbitMQ cluster'
        -
          macro: '{$RABBITMQ.LLD.FILTER.QUEUE.MATCHES}'
          value: '.*'
          description: 'Filter of discoverable queues'
        -
          macro: '{$RABBITMQ.LLD.FILTER.QUEUE.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discovered queues'
        -
          macro: '{$RABBITMQ.MESSAGES.MAX.WARN}'
          value: '1000'
          description: 'Maximum number of messages in the queue for trigger expression'
        -
          macro: '{$RABBITMQ.RESPONSE_TIME.MAX.WARN}'
          value: '10'
          description: 'Maximum RabbitMQ response time in seconds for trigger expression'
      dashboards:
        -
          uuid: 5e70f5ff6706442abc83ec1b206d9fe4
          name: 'RabbitMQ node status'
          pages:
            -
              widgets:
                -
                  type: GRAPH_CLASSIC
                  width: '12'
                  height: '5'
                  fields:
                    -
                      type: INTEGER
                      name: source_type
                      value: '0'
                    -
                      type: GRAPH
                      name: graphid
                      value:
                        name: 'RabbitMQ: Node status'
                        host: 'RabbitMQ node by HTTP'
                -
                  type: GRAPH_CLASSIC
                  x: '12'
                  width: '12'
                  height: '5'
                  fields:
                    -
                      type: INTEGER
                      name: source_type
                      value: '0'
                    -
                      type: GRAPH
                      name: graphid
                      value:
                        name: 'RabbitMQ: Uptime'
                        host: 'RabbitMQ node by HTTP'
                -
                  type: GRAPH_CLASSIC
                  'y': '5'
                  width: '12'
                  height: '5'
                  fields:
                    -
                      type: INTEGER
                      name: source_type
                      value: '0'
                    -
                      type: GRAPH
                      name: graphid
                      value:
                        name: 'RabbitMQ: Disk free'
                        host: 'RabbitMQ node by HTTP'
                -
                  type: GRAPH_CLASSIC
                  x: '12'
                  'y': '5'
                  width: '12'
                  height: '5'
                  fields:
                    -
                      type: INTEGER
                      name: source_type
                      value: '0'
                    -
                      type: GRAPH
                      name: graphid
                      value:
                        name: 'RabbitMQ: Memory used'
                        host: 'RabbitMQ node by HTTP'
                -
                  type: GRAPH_CLASSIC
                  'y': '10'
                  width: '12'
                  height: '5'
                  fields:
                    -
                      type: INTEGER
                      name: source_type
                      value: '0'
                    -
                      type: GRAPH
                      name: graphid
                      value:
                        name: 'RabbitMQ: File descriptors'
                        host: 'RabbitMQ node by HTTP'
                -
                  type: GRAPH_CLASSIC
                  x: '12'
                  'y': '10'
                  width: '12'
                  height: '5'
                  fields:
                    -
                      type: INTEGER
                      name: source_type
                      value: '0'
                    -
                      type: GRAPH
                      name: graphid
                      value:
                        name: 'RabbitMQ: Sockets'
                        host: 'RabbitMQ node by HTTP'
      valuemaps:
        -
          uuid: e65c3d3e8ea443a281b37c51ca461c26
          name: 'Alarm state'
          mappings:
            -
              value: '0'
              newvalue: Ok
            -
              value: '1'
              newvalue: Alarm
        -
          uuid: 55188bbb2ede4300a6292b373ee36ab7
          name: 'RabbitMQ healthcheck'
          mappings:
            -
              value: '0'
              newvalue: Failed
            -
              value: '1'
              newvalue: Ok
        -
          uuid: aaf7d0b8b306412b8a3272343708518f
          name: 'Service state'
          mappings:
            -
              value: '0'
              newvalue: Down
            -
              value: '1'
              newvalue: Up
  graphs:
    -
      uuid: 02f7ec07b4384795bbf5212e9ea06fb0
      name: 'RabbitMQ: Disk free'
      graph_items:
        -
          drawtype: GRADIENT_LINE
          color: 1A7C11
          item:
            host: 'RabbitMQ node by HTTP'
            key: rabbitmq.node.disk_free
        -
          sortorder: '1'
          drawtype: BOLD_LINE
          color: FF0000
          item:
            host: 'RabbitMQ node by HTTP'
            key: rabbitmq.node.disk_free_limit
    -
      uuid: 71eff9e96a8b46acbe1cf00d1e0cc388
      name: 'RabbitMQ: File descriptors'
      graph_items:
        -
          color: 1A7C11
          item:
            host: 'RabbitMQ node by HTTP'
            key: rabbitmq.node.fd_used
    -
      uuid: d4e9c478e03c4ecab7538c3baa77f61f
      name: 'RabbitMQ: Memory used'
      graph_items:
        -
          drawtype: GRADIENT_LINE
          color: 1A7C11
          item:
            host: 'RabbitMQ node by HTTP'
            key: rabbitmq.node.mem_used
        -
          sortorder: '1'
          drawtype: BOLD_LINE
          color: FF0000
          item:
            host: 'RabbitMQ node by HTTP'
            key: rabbitmq.node.mem_limit
    -
      uuid: 4243b315b9b04adeb8c3cab16b4c3b02
      name: 'RabbitMQ: Node status'
      graph_items:
        -
          drawtype: BOLD_LINE
          color: 1A7C11
          item:
            host: 'RabbitMQ node by HTTP'
            key: rabbitmq.node.running
        -
          sortorder: '1'
          drawtype: BOLD_LINE
          color: 2774A4
          item:
            host: 'RabbitMQ node by HTTP'
            key: rabbitmq.healthcheck
    -
      uuid: f3c071a0c20340f1bf86ecd66b911bb2
      name: 'RabbitMQ: Sockets'
      graph_items:
        -
          drawtype: GRADIENT_LINE
          color: 1A7C11
          item:
            host: 'RabbitMQ node by HTTP'
            key: rabbitmq.node.sockets_used
        -
          sortorder: '1'
          color: 2774A4
          item:
            host: 'RabbitMQ node by HTTP'
            key: rabbitmq.node.sockets_total
    -
      uuid: 415ce1917ecc4575bcbeeaf3b01df4cb
      name: 'RabbitMQ: Uptime'
      graph_items:
        -
          color: 1A7C11
          item:
            host: 'RabbitMQ node by HTTP'
            key: rabbitmq.node.uptime
